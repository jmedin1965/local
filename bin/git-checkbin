#!/bin/bash
#
# look for binary files
#
# REF: https://stackoverflow.com/questions/20226132/is-there-a-git-hook-which-can-prevent-binary-check-ins
#

#
# Join stderr to stdout
#
exec 1>&2

GIT_DIR="$(git rev-parse --git-dir)"
filter="checkbin"
numstat=""

sha256sum()
{
	local arg
	for arg in "$@"
	do
		echo "oid sha256:$(set -- $(/usr/bin/sha256sum "$arg"); echo $1)"
		echo "size $(set -- $(/usr/bin/wc --bytes "$arg"); echo $1)"
		shift
	done
}

hook_add()
{
	local hook="$1"
	local line="$2"

	# need to escape \\ and [ and ] in the regex pattern
	# but still need to write the original line only
	regex="${line//\\/\\\\}"
	regex="${regex//[/\\[}"
	regex="${regex//]/\\]}"

	[ $# == 2 ] || return 1

	if [ ! -d "$GIT_DIR/hooks" ]
	then
		echo "Error: unable to find hooks directory $GIT_DIR/hooks"
		return 1
	fi

	[ -e "$GIT_DIR/hooks/${hook}" ] || echo "#!/bin/bash" > "$GIT_DIR/hooks/${hook}"

	if [  "$(/bin/grep --count "^${regex}\$" "$GIT_DIR/hooks/${hook}")" == 0 ]
	then
		echo "${line}" >> "$GIT_DIR/hooks/${hook}"
		echo "hook ${hook} updated." 
	fi

	/bin/chmod 755 "$GIT_DIR/hooks/${hook}"
}

#
# process command line options
#
for arg in "$@"
do
	[ "$arg" == "--all" ] && numstat="4b825dc642cb6eb9a060e54bf8d69288fbee4904"
done

case "$1" in
	"enable")
		/usr/bin/git config hooks.${filter} true
		bmr="$(/usr/bin/git config --local --get branch.master.remote)"
		url="$(/usr/bin/git config --local --get remote.${bmr}.url)"
		set -- $url
		if [ $# -gt 1 ]
		then
			while [ $# != 1 ]; do shift; done
			/usr/bin/git config --local remote.${bmr}.url "$1"

		fi 
		echo "$filter enabled"
		;;
	"disable")
		/usr/bin/git config hooks.${filter} false
		bmr="$(/usr/bin/git config --local --get branch.master.remote)"
		url="$(/usr/bin/git config --local --get remote.${bmr}.url)"
		pushurl="$(/usr/bin/git config --local --get remote.${bmr}.pushurl)"
		set -- $url
		[ $# == 1 ] && /usr/bin/git config --local remote.${bmr}.url "disabled $1"
		while [ $# != 1 ]; do shift; done
		[ -z "$pushurl" ] && [ -n "$1" ] && /usr/bin/git config --local remote.${bmr}.pushurl  "$1"
		echo "$filter disabled"
		;;
	"init")
		hook_add pre-commit "/usr/bin/git ${filter}"
		hook_add post-merge "[ \"\$(/usr/bin/git config --get hooks.${filter})\" == true ] && echo \"pull disabled in \\\"$GIT_DIR/hooks/post-merge\\\"\" && exit 1"

		/usr/bin/git config filter.${filter}.clean "git-${filter} clean -- %f"
		/usr/bin/git config filter.${filter}.smudge "git-${filter} smudge -- %f"
		/usr/bin/git config hooks.${filter} true
		
		;;
	"clean")
		shift
		while [ $# != 0 ]
		do
			case "$1" in
			"--")	shift; sha256sum "$@"; break;;
			"-"*)	echo "${1}: Unknown option";;
			*)	sha256sum "$1";;
			esac
			shift
		done
		;;
	"smudge")
		;;
	"fix")
		shift
		opts=""
		for file in "$@"
		do
			case "$file" in
			"-"*) opts="$opts $file";;
			*)
				echo fix $file
				/usr/bin/git rm $opts --cached "$file"
				/usr/bin/git add "$file"
				;;
			esac
		done
		if [ $# -gt 0 ]
		then
			echo "Please commit changes that were made."
	fi
		;;
	"track")
		if [ -e "${GIT_DIR}/../.gitattributes" ]
		then
			if [ -z "$2" ]
			then
				echo "Listing tracked paths"
				/bin/grep -e "\sfilter=${filter}\s" -e "\sfilter=${filter}$" "${GIT_DIR}/../.gitattributes" | while read a b c
				do
					echo "    $a"
				done
			else
				shift
				for file in "$@"
				do
					fileNoSpaces="${file// /[[:space:]]}"
					match="$(
						/bin/cat "${GIT_DIR}/../.gitattributes" | while read a b c d
						do
							[ "$a" == "${fileNoSpaces}" ] && [ "$b" == "filter=${filter}" -o "$c"  == "filter=${filter}" -o "$d" == "filter=${filter}" ] && echo "$a"
						done
						)"
					if [ -z "$match" ]
					then
						echo "Tracking $file"
						echo "$fileNoSpaces filter=${filter}" >> "${GIT_DIR}/../.gitattributes"
					else
						echo "$file already supported"
					fi
				done
			fi
		fi
		;;
	*)
		[ "$(/usr/bin/git config --get hooks.${filter})" == true ] || exit 0
		if /usr/bin/git diff --cached --numstat $numstat | /bin/fgrep --quiet -- '-	-	'
		then
			echo "Error: binary files found"
			/usr/bin/git diff $opts --cached --numstat $numstat | /bin/fgrep -- '-	-	' | while read a b c
			do
				echo "    $c"
			done
			exit 1
		fi
		;;
esac

